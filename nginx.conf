# Basic Nginx reverse proxy configuration for RStudio Portal
# This file should be included within the 'http' block of your main nginx.conf
# For example, in /etc/nginx/nginx.conf, you might have:
# http {
#   ...
#   include /etc/nginx/sites-enabled/*;
#   ...
# }

# Global directives like 'worker_processes', 'pid', and 'events' block
# have been removed as they belong in the main nginx.conf.

# The surrounding 'http {}' block has also been removed.

sendfile on;
tcp_nopush on;
types_hash_max_size 2048;

include /etc/nginx/mime.types;
default_type application/octet-stream;

ssl_protocols TLSv1.2 TLSv1.3; # Dropping TLSv1.0 and TLSv1.1 is a good idea
ssl_prefer_server_ciphers on;

# These logs are often defined in the main http block.
# If your main Nginx config already defines them, you might remove these.
access_log /var/log/nginx/access.log;
error_log /var/log/nginx/error.log;

gzip on;
gzip_disable "msie6";


# FastAPI application server
upstream fastapi_app {
    server 127.0.0.1:8001; # Assuming FastAPI runs on port 8001
}

server {
    listen 8888; # Changed from 80 to an unused port; Or 443 if using SSL
    server_name _; # Replace with your actual domain or IP


    location / {
        proxy_pass http://fastapi_app;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
    }

    location /static {
        alias /opt/rstudio-portal/static; # Path to your static files for FastAPI
        expires 30d;
        add_header Cache-Control "public";
    }

    # Dynamic RStudio routing
    # Example: /rstudio/username/port -> localhost:port
    # This requires a more complex setup, possibly using map or Lua scripting,
    # or individual location blocks if the number of users/ports is manageable.
    #
    # A simple approach if you know the username and can map it to a port range
    # or if the FastAPI app provides an endpoint to query port for a user.
    #
    # For a truly dynamic setup based on the path like /rstudio/alice or /rstudio/bob
    # where alice and bob map to different backend ports (e.g., 8787, 8788),
    # you would typically need:
    # 1. Nginx to be aware of these mappings (e.g., via an include file generated by your app)
    # 2. Or use something like `proxy_pass http://127.0.0.1:$rstudio_port;` where $rstudio_port
    #    is a variable set by a `map` directive or a small script.

    # --- Placeholder for RStudio routing ---
    # This is a simplified example and needs to be made dynamic.
    # You might need to generate these location blocks or use a map.

    # Example for a user 'alice' if her RStudio is on port 8787
    # location /rstudio/alice/ {
    #     proxy_pass http://127.0.0.1:8787/;
    #     proxy_http_version 1.1;
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection "upgrade";
    #     proxy_set_header Host $host;
    #     proxy_read_timeout 20d; # For long R sessions
    #     proxy_buffering off;
    # }

    # Example for a user 'bob' if his RStudio is on port 8788
    # location /rstudio/bob/ {
    #     proxy_pass http://127.0.0.1:8788/;
    #     proxy_http_version 1.1;
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection "upgrade";
    #     proxy_set_header Host $host;
    #     proxy_read_timeout 20d;
    #     proxy_buffering off;
    # }

    # A more generic approach using regex if the port is in the URL
    # e.g. /rstudio/username/PORT_NUMBER/
    # This assumes your FastAPI app generates links like this.
    location ~ ^/rstudio/([^/]+)/([0-9]+)/(.*)$ {
        set $rstudio_user $1;
        set $rstudio_port $2;
        set $rstudio_path $3;

        proxy_pass http://127.0.0.1:$rstudio_port/$rstudio_path$is_args$args;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_read_timeout 20d; # For long R sessions
        proxy_buffering off;

        # Add authentication/authorization here if needed, e.g., based on $rstudio_user
        # This could involve subrequests to your FastAPI app to verify access.
    }


    # If you want to serve RStudio directly via Nginx without the port in the URL,
    # you'll need a way for Nginx to know which port maps to which user.
    # One way is to have your FastAPI app update an Nginx map file and reload Nginx.
    #
    # /etc/nginx/conf.d/rstudio_user_map.conf
    # map $uri $rstudio_backend_port {
    #    /rstudio/alice/ 8787;
    #    /rstudio/bob/   8788;
    #    default         0; # or some error page
    # }
    #
    # Then in your server block:
    # include /etc/nginx/conf.d/rstudio_user_map.conf;
    #
    # location ~ ^/rstudio/([^/]+)/ {
    #     if ($rstudio_backend_port = 0) {
    #         return 404; # User not found or no active session
    #     }
    #     proxy_pass http://127.0.0.1:$rstudio_backend_port/;
    #     # ... other proxy settings ...
    # }
}
